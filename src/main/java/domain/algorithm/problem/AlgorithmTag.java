package domain.algorithm.problem;

import java.util.Arrays;

public enum AlgorithmTag {
    MATHEMATICS("수학", "MATHEMATICS"),
    IMPLEMENTATION("구현", "IMPLEMENTATION"),
    DYNAMIC_PROGRAMMING("다이나믹 프로그래밍", "DYNAMIC_PROGRAMMING"),
    DATA_STRUCTURES("자료 구조", "DATA_STRUCTURES"),
    GRAPH_THEORY("그래프 이론", "GRAPH_THEORY"),
    GREEDY("그리디 알고리즘", "GREEDY"),
    STRING("문자열", "STRING"),
    BRUTEFORCING("브루트포스 알고리즘", "BRUTEFORCING"),
    GRAPH_TRAVERSAL("그래프 탐색", "GRAPH_TRAVERSAL"),
    SORTING("정렬", "SORTING"),
    GEOMETRY("기하학", "GEOMETRY"),
    AD_HOC("애드 혹", "AD_HOC"),
    NUMBER_THEORY("정수론", "NUMBER_THEORY"),
    TREE("트리", "TREE"),
    SEGMENT_TREE("세그먼트 트리", "SEGMENT_TREE"),
    BINARY_SEARCH("이분 탐색", "BINARY_SEARCH"),
    ARITHMETIC("사칙연산", "ARITHMETIC"),
    SIMULATION("시뮬레이션", "SIMULATION"),
    CONSTRUCTIVE("해 구성하기", "CONSTRUCTIVE"),
    PREFIX_SUM("누적 합", "PREFIX_SUM"),
    BREADTH_FIRST_SEARCH("너비 우선 탐색", "BREADTH_FIRST_SEARCH"),
    COMBINATORICS("조합론", "COMBINATORICS"),
    CASE_WORK("많은 조건 분기", "CASE_WORK"),
    DEPTH_FIRST_SEARCH("깊이 우선 탐색", "DEPTH_FIRST_SEARCH"),
    BITMASK("비트마스킹", "BITMASK"),
    SET_BY_HASHING("해시를 사용한 집합과 맵", "SET_BY_HASHING"),
    SHORTEST_PATH("최단 경로", "SHORTEST_PATH"),
    DIJKSTRA("데이크스트라", "DIJKSTRA"),
    BACKTRACKING("백트래킹", "BACKTRACKING"),
    DISJOINT_SET("분리 집합", "DISJOINT_SET"),
    SET_BY_TREES("트리를 사용한 집합과 맵", "SET_BY_TREES"),
    SWEEPING("스위핑", "SWEEPING"),
    PARSING("파싱", "PARSING"),
    PRIORITY_QUEUE("우선순위 큐", "PRIORITY_QUEUE"),
    DYNAMIC_PROGRAMMING_ON_TREES("트리에서의 다이나믹 프로그래밍", "DYNAMIC_PROGRAMMING_ON_TREES"),
    DIVIDE_AND_CONQUER("분할 정복", "DIVIDE_AND_CONQUER"),
    TWO_POINTER("두 포인터", "TWO_POINTER"),
    GAME_THEORY("게임 이론", "GAME_THEORY"),
    STACK("스택", "STACK"),
    PARAMETRIC_SEARCH("매개 변수 탐색", "PARAMETRIC_SEARCH"),
    PROBABILITY_THEORY("확률론", "PROBABILITY_THEORY"),
    MAXIMUM_FLOW("최대 유량", "MAXIMUM_FLOW"),
    PRIMALITY_TEST("소수 판정", "PRIMALITY_TEST"),
    DYNAMIC_PROGRAMMING_USING_BITFIELD("비트필드를 이용한 다이나믹 프로그래밍", "DYNAMIC_PROGRAMMING_USING_BITFIELD"),
    SEGMENT_TREE_WITH_LAZY_PROPAGATION("느리게 갱신되는 세그먼트 트리", "SEGMENT_TREE_WITH_LAZY_PROPAGATION"),
    EXPONENTIATION_BY_SQUARING("분할 정복을 이용한 거듭제곱", "EXPONENTIATION_BY_SQUARING"),
    OFFLINE_QUERIES("오프라인 쿼리", "OFFLINE_QUERIES"),
    ARBITRARY_PRECISION_BIG_INTEGERS("임의 정밀도 / 큰 수 연산", "ARBITRARY_PRECISION_BIG_INTEGERS"),
    KNAPSACK("배낭 문제", "KNAPSACK"),
    VALUE_COORDINATE_COMPRESSION("값 / 좌표 압축", "VALUE_COORDINATE_COMPRESSION"),
    RECURSION("재귀", "RECURSION"),
    MINIMUM_SPANNING_TREE("최소 스패닝 트리", "MINIMUM_SPANNING_TREE"),
    PRECOMPUTATION("런타임 전의 전처리", "PRECOMPUTATION"),
    SIEVE_OF_ERATOSTHENES("에라토스테네스의 체", "SIEVE_OF_ERATOSTHENES"),
    EUCLIDEAN_ALGORITHM("유클리드 호제법", "EUCLIDEAN_ALGORITHM"),
    BIPARTITE_MATCHING("이분 매칭", "BIPARTITE_MATCHING"),
    CONVEX_HULL("볼록 껍질", "CONVEX_HULL"),
    LINEAR_ALGEBRA("선형대수학", "LINEAR_ALGEBRA"),
    TOPOLOGICAL_SORTING("위상 정렬", "TOPOLOGICAL_SORTING"),
    FLOYD_WARSHALL("플로이드–워셜", "FLOYD_WARSHALL"),
    HASHING("해싱", "HASHING"),
    LOWEST_COMMON_ANCESTOR("최소 공통 조상", "LOWEST_COMMON_ANCESTOR"),
    DIRECTED_ACYCLIC_GRAPH("방향 비순환 그래프", "DIRECTED_ACYCLIC_GRAPH"),
    INCLUSION_AND_EXCLUSION("포함 배제의 원리", "INCLUSION_AND_EXCLUSION"),
    RANDOMIZATION("무작위화", "RANDOMIZATION"),
    STRONGLY_CONNECTED_COMPONENT("강한 연결 요소", "STRONGLY_CONNECTED_COMPONENT"),
    SPARSE_TABLE("희소 배열", "SPARSE_TABLE"),
    FAST_FOURIER_TRANSFORM("고속 푸리에 변환", "FAST_FOURIER_TRANSFORM"),
    TRIE("트라이", "TRIE"),
    SMALLER_TO_LARGER_TECHNIQUE("작은 집합에서 큰 집합으로 합치는 테크닉", "SMALLER_TO_LARGER_TECHNIQUE"),
    DEQUE("덱", "DEQUE"),
    LINE_SEGMENT_INTERSECTION_CHECK("선분 교차 판정", "LINE_SEGMENT_INTERSECTION_CHECK"),
    MINIMUM_COST_MAXIMUM_FLOW("최소 비용 최대 유량", "MINIMUM_COST_MAXIMUM_FLOW"),
    SQUARE_ROOT_DECOMPOSITION("제곱근 분할법", "SQUARE_ROOT_DECOMPOSITION"),
    MODULAR_MULTIPLICATIVE_INVERSE("모듈로 곱셈 역원", "MODULAR_MULTIPLICATIVE_INVERSE"),
    CALCULUS("미적분학", "CALCULUS"),
    HEURISTICS("휴리스틱", "HEURISTICS"),
    SLIDING_WINDOW("슬라이딩 윈도우", "SLIDING_WINDOW"),
    GEOMETRY_3D("3차원 기하학", "GEOMETRY_3D"),
    CONVEX_HULL_TRICK("볼록 껍질을 이용한 최적화", "CONVEX_HULL_TRICK"),
    SPRAGUE_GRUNDY_THEOREM("스프라그–그런디 정리", "SPRAGUE_GRUNDY_THEOREM"),
    SUFFIX_ARRAY_AND_LCP_ARRAY("접미사 배열과 lcp 배열", "SUFFIX_ARRAY_AND_LCP_ARRAY"),
    CENTROID("센트로이드", "CENTROID"),
    EULER_TOUR_TECHNIQUE("오일러 경로 테크닉", "EULER_TOUR_TECHNIQUE"),
    TERNARY_SEARCH("삼분 탐색", "TERNARY_SEARCH"),
    MEET_IN_THE_MIDDLE("중간에서 만나기", "MEET_IN_THE_MIDDLE"),
    BIT_SET("비트 집합", "BIT_SET"),
    PERMUTATION_CYCLE_DECOMPOSITION("순열 사이클 분할", "PERMUTATION_CYCLE_DECOMPOSITION"),
    PYTHAGORAS_THEOREM("피타고라스 정리", "PYTHAGORAS_THEOREM"),
    KMP("kmp", "KNUTH_MORRIS_PRATT"),
    HEAVY_LIGHT_DECOMPOSITION("heavy-light 분할", "HEAVY_LIGHT_DECOMPOSITION"),
    GAUSSIAN_ELIMINATION("가우스 소거법", "GAUSSIAN_ELIMINATION"),
    LONGEST_INCREASING_SEQUENCE_IN_O_N_LOG_N("가장 긴 증가하는 부분 수열: o(n log n)", "LONGEST_INCREASING_SEQUENCE_IN_O_N_LOG_N"),
    CENTROID_DECOMPOSITION("센트로이드 분할", "CENTROID_DECOMPOSITION"),
    AREA_OF_A_POLYGON("다각형의 넓이", "AREA_OF_A_POLYGON"),
    MAX_FLOW_MIN_CUT_THEOREM("최대 유량 최소 컷 정리", "MAX_FLOW_MIN_CUT_THEOREM"),
    QUEUE("큐", "QUEUE"),
    PHYSICS("물리학", "PHYSICS"),
    LINEARITY_OF_EXPECTATION("기댓값의 선형성", "LINEARITY_OF_EXPECTATION"),
    FERMAT_S_LITTLE_THEOREM("페르마의 소정리", "FERMAT_S_LITTLE_THEOREM"),
    BIPARTITE_GRAPH("이분 그래프", "BIPARTITE_GRAPH"),
    EULERIAN_PATH_CIRCUIT("오일러 경로", "EULERIAN_PATH_CIRCUIT"),
    TWO_SAT("2-sat", "2_SAT"),
    ARTICULATION_POINTS_AND_BRIDGES("단절점과 단절선", "ARTICULATION_POINTS_AND_BRIDGES"),
    TRAVELLING_SALESMAN_PROBLEM("외판원 순회 문제", "TRAVELLING_SALESMAN_PROBLEM"),
    ZERO_ONE_BFS("0-1 너비 우선 탐색", "0-1_BFS"),
    PERSISTENT_SEGMENT_TREE("퍼시스턴트 세그먼트 트리", "PERSISTENT_SEGMENT_TREE"),
    LINKED_LIST("연결 리스트", "LINKED_LIST"),
    CHINESE_REMAINDER_THEOREM("중국인의 나머지 정리", "CHINESE_REMAINDER_THEOREM"),
    BICONNECTED_COMPONENT("이중 연결 요소", "BICONNECTED_COMPONENT"),
    PLANAR_GRAPH("평면 그래프", "PLANAR_GRAPH"),
    EULER_TOTIENT_FUNCTION("오일러 피 함수", "EULER_TOTIENT_FUNCTION"),
    PIGEONHOLE_PRINCIPLE("비둘기집 원리", "PIGEONHOLE_PRINCIPLE"),
    CACTUS("선인장", "CACTUS"),
    BELLMAN_FORD("벨만–포드", "BELLMAN_FORD"),
    POINT_IN_CONVEX_POLYGON_CHECK("볼록 다각형 내부의 점 판정", "POINT_IN_CONVEX_POLYGON_CHECK"),
    SPLAY_TREE("스플레이 트리", "SPLAY_TREE"),
    EXTENDED_EUCLIDEAN_ALGORITHM("확장 유클리드 호제법", "EXTENDED_EUCLIDEAN_ALGORITHM"),
    MOS("mo's", "MO'S"),
    DIVIDE_AND_CONQUER_OPTIMIZATION("분할 정복을 사용한 최적화", "DIVIDE_AND_CONQUER_OPTIMIZATION"),
    PARALLEL_BINARY_SEARCH("병렬 이분 탐색", "PARALLEL_BINARY_SEARCH"),
    EULER_CHARACTERISTIC("오일러 지표 (χ=v-e+f)", "EULER_CHARACTERISTIC_(χ=V-E+F)"),
    SLOPE_TRICK("함수 개형을 이용한 최적화", "SLOPE_TRICK"),
    DEQUE_RANGE_MAXIMUM_TRICK("덱을 이용한 구간 최댓값 트릭", "DEQUE_RANGE_MAXIMUM_TRICK"),
    MULTIDIMENSIONAL_SEGMENT_TREE("다차원 세그먼트 트리", "MULTIDIMENSIONAL_SEGMENT_TREE"),
    HALF_PLANE_INTERSECTION("반평면 교집합", "HALF_PLANE_INTERSECTION"),
    ROTATING_CALIPERS("회전하는 캘리퍼스", "ROTATING_CALIPERS"),
    DYNAMIC_PROGRAMMING_USING_A_DEQUE("덱을 이용한 다이나믹 프로그래밍", "DYNAMIC_PROGRAMMING_USING_A_DEQUE"),
    FLOOD_FILL("플러드 필", "FLOOD_FILL"),
    AHO_CORASICK("아호-코라식", "AHO_CORASICK"),
    REGULAR_EXPRESSION("정규 표현식", "REGULAR_EXPRESSION"),
    POLLARD_RHO("폴라드 로", "POLLARD_RHO"),
    MERGE_SORT_TREE("머지 소트 트리", "MERGE_SORT_TREE"),
    MANACHER_S("매내처", "MANACHER'S"),
    MILLER_RABIN("밀러–라빈 소수 판별법", "MILLER_RABIN"),
    DYNAMIC_PROGRAMMING_USING_CONNECTION_PROFILE("커넥션 프로파일을 이용한 다이나믹 프로그래밍", "DYNAMIC_PROGRAMMING_USING_CONNECTION_PROFILE"),
    BERLEKAMP_MASSEY("벌리캠프–매시", "BERLEKAMP_MASSEY"),
    TREE_ISOMORPHISM("트리 동형 사상", "TREE_ISOMORPHISM"),
    SIMULATED_ANNEALING("담금질 기법", "SIMULATED_ANNEALING"),
    GENERATING_FUNCTION("생성 함수", "GENERATING_FUNCTION"),
    FUNCTIONAL_GRAPH("함수형 그래프", "FUNCTIONAL_GRAPH"),
    MOEBIUS_INVERSION("뫼비우스 반전 공식", "MOEBIUS_INVERSION"),
    HALL_S_THEOREM("홀의 결혼 정리", "HALL'S_THEOREM"),
    HUNGARIAN("헝가리안", "HUNGARIAN"),
    LINK_CUT_TREE("링크/컷 트리", "LINK_CUT_TREE"),
    OFFLINE_DYNAMIC_CONNECTIVITY("오프라인 동적 연결성 판정", "OFFLINE_DYNAMIC_CONNECTIVITY"),
    POINT_IN_NON_CONVEX_POLYGON_CHECK("오목 다각형 내부의 점 판정", "POINT_IN_NON_CONVEX_POLYGON_CHECK"),
    ALIENS_TRICK("aliens 트릭", "ALIENS_TRICK"),
    RABIN_KARP("라빈–카프", "RABIN_KARP"),
    LINEAR_PROGRAMMING("선형 계획법", "LINEAR_PROGRAMMING"),
    NUMERICAL_ANALYSIS("수치해석", "NUMERICAL_ANALYSIS"),
    STATISTICS("통계학", "STATISTICS"),
    SUM_OVER_SUBSETS_DYNAMIC_PROGRAMMING("부분집합의 합 다이나믹 프로그래밍", "SUM_OVER_SUBSETS_DYNAMIC_PROGRAMMING"),
    CIRCULATION("서큘레이션", "CIRCULATION"),
    TREE_COMPRESSION("트리 압축", "TREE_COMPRESSION"),
    DIGIT_DP("자릿수를 이용한 다이나믹 프로그래밍", "DIGIT_DP"),
    VORONOI_DIAGRAM("보로노이 다이어그램", "VORONOI_DIAGRAM"),
    DUAL_GRAPH("쌍대 그래프", "DUAL_GRAPH"),
    LUCAS_THEOREM("뤼카 정리", "LUCAS_THEOREM"),
    MATROID("매트로이드", "MATROID"),
    DUALITY("쌍대성", "DUALITY"),
    KITAMASA("키타마사", "KITAMASA"),
    CARTESIAN_TREE("데카르트 트리", "CARTESIAN_TREE"),
    GENERAL_MATCHING("일반적인 매칭", "GENERAL_MATCHING"),
    TREE_DECOMPOSITION("트리 분할", "TREE_DECOMPOSITION"),
    Z("z", "Z"),
    GEOMETRY_HYPERDIMENSION("4차원 이상의 기하학", "GEOMETRY_HYPERDIMENSION"),
    MINIMUM_ENCLOSING_CIRCLE("최소 외접원", "MINIMUM_ENCLOSING_CIRCLE"),
    MONOTONE_QUEUE_OPTIMIZATION("단조 큐를 이용한 최적화", "MONOTONE_QUEUE_OPTIMIZATION"),
    BURNSIDE_S_LEMMA("번사이드 보조정리", "BURNSIDE'S_LEMMA"),
    BIDIRECTIONAL_SEARCH("양방향 탐색", "BIDIRECTIONAL_SEARCH"),
    DISCRETE_LOGARITHM("이산 로그", "DISCRETE_LOGARITHM"),
    PALINDROME_TREE("회문 트리", "PALINDROME_TREE"),
    TOP_TREE("탑 트리", "TOP_TREE"),
    DIFFERENTIAL_CRYPTANALYSIS("차분 공격", "DIFFERENTIAL_CRYPTANALYSIS"),
    PICK_S_THEOREM("픽의 정리", "PICK'S_THEOREM"),
    UTF_8_INPUTS("utf-8 입력 처리", "UTF-8_INPUTS"),
    DELAUNAY_TRIANGULATION("델로네 삼각분할", "DELAUNAY_TRIANGULATION"),
    BAYES_THEOREM("베이즈 정리", "BAYES_THEOREM"),
    DOMINATOR_TREE("도미네이터 트리", "DOMINATOR_TREE"),
    ROPE("로프", "ROPE"),
    KNUTH_S_X("크누스 x", "KNUTH'S_X"),
    STABLE_MARRIAGE_PROBLEM("안정 결혼 문제", "STABLE_MARRIAGE_PROBLEM"),
    DEGREE_SEQUENCE("차수열", "DEGREE_SEQUENCE"),
    BOOLEAN_OPERATIONS_ON_GEOMETRIC_OBJECTS("도형에서의 불 연산", "BOOLEAN_OPERATIONS_ON_GEOMETRIC_OBJECTS"),
    KNUTH_OPTIMIZATION("크누스 최적화", "KNUTH_OPTIMIZATION"),
    DANCING_LINKS("춤추는 링크", "DANCING_LINKS"),
    SUFFIX_TREE("접미사 트리", "SUFFIX_TREE"),
    POLYNOMIAL_INTERPOLATION("다항식 보간법", "POLYNOMIAL_INTERPOLATION"),
    DIRECTED_MINIMUM_SPANNING_TREE("유향 최소 신장 트리", "DIRECTED_MINIMUM_SPANNING_TREE"),
    DISCRETE_K_TH_ROOT("이산 k제곱근", "DISCRETE_K_TH_ROOT"),
    UNKNOWN("UNKNOWN", "UNKNOWN");
    private final String key;
    private final String value;
    private final static AlgorithmTag[] TAGS = values();
    AlgorithmTag(String key, String value) {
        this.key = key;
        this.value = value;
    }
    public String getTag() {
        return value;
    }
    private boolean findKey(String key) {
        return this.key.equals(key);
    }

    private static AlgorithmTag unknownTag() {
        return UNKNOWN;
    }
    public static AlgorithmTag findTag(String key) {
        return Arrays.stream(TAGS)
                .filter((tag) -> tag.findKey(key))
                .findFirst()
                .orElseGet(AlgorithmTag::unknownTag);
    }
}
